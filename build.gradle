import java.util.regex.Pattern
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import aQute.bnd.osgi.Processor

buildscript {
    repositories {
        jcenter()
        mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:3.5.0'
    }
}

plugins {
	id "maven-publish"
	id "signing"
	id "org.jdrupes.mdoclet" version "1.0.3"
	id "com.moowork.node" version "1.2.0"
	id 'org.ajoberstar.git-publish' version '0.4.0-rc.2'
}

ext {
	isTravisBuild = System.getenv().get("TRAVIS") == 'true'
}

// Prepare github authentication for plugins
if (System.properties['org.ajoberstar.grgit.auth.username'] == null) {
	System.setProperty('org.ajoberstar.grgit.auth.username',
		System.getenv("GH_TOKEN") ?: project.properties['github.token'] ?: "nouser")
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        // Sometimes, synchronization with central is too slow
        maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
        // Snapshots
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        // Experimental, not sure if this is the way tpo go...
        maven { url 'https://jitpack.io' }
    }
	
	// Makes Eclipse-groovy handle *.gradle file properly
	apply plugin:'groovy'

	group = 'org.jgrapes'
	
	ext.releaseVersion = "0.18.0"
	ext.isSnapshot = false
	version = releaseVersion + (isSnapshot ? "-SNAPSHOT" : "")
}

subprojects {

	apply plugin: 'signing'
	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	apply plugin: 'org.jdrupes.mdoclet'
	
    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
	
	if (project.file("bnd.bnd").exists()) {

		apply plugin: 'biz.aQute.bnd.builder'
		
		// Provide the Bundle-Version (shared by all libraries)
		String bundleVersion = releaseVersion +
			(isSnapshot ? ".-\${tstamp}-SNAPSHOT" : ".ga")
		
		jar {
			manifest {
				attributes('Bundle-Version': bundleVersion)
			}
		}

		dependencies {
			// Use gradle mechanims to get the artifact to baseline against.
			// We baseline against the previous release 
			// (latest excluding current)
			baseline("${group}:${project.name}:(,${releaseVersion})") {
				transitive false
			}
		}
		
		if (project.name.startsWith("org.jgrapes.portal.jqueryui.themes.")) {
			dependencies {
				compile 'org.jgrapes:org.jgrapes.portal.jqueryui:[0.18.0,)'
			}
			
			jar {
				into('META-INF') {
					from 'resources/META-INF'
				}
			}
		}
	}
	
    dependencies {
        compileOnly 'org.osgi:org.osgi.annotation:6.0.0'
        testCompile 'junit:junit:4.12', 'net.jodah:concurrentunit:0.4.2'
		testCompile "org.spockframework:spock-core:1.1-groovy-2.4-rc-3"
    }

    // Configure sensible layout
    sourceSets {
        main {
            java {
                srcDir 'src'
            }
            resources {
                srcDir 'resources'
            }
        }

        test {
            java {
                srcDir 'test'
            }
			groovy {
				srcDir 'test'
			}
            resources {
                srcDir 'test-resources'
            }
        }
    }
    
    test {
        testLogging {
            events TestLogEvent.FAILED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.PASSED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT

            exceptionFormat TestExceptionFormat.FULL

            showStandardStreams = true
            showExceptions = true
            showStackTraces = true
            showCauses = true
        }
		
		if (isTravisBuild) {
            maxParallelForks = 2
            maxHeapSize = '768m'
        }
    }

	// Additional jars for publishing

	task sourcesJar(type: Jar) {
		from sourceSets.main.allJava
		classifier "sources"
	}
	
	if (project.name != "org.jgrapes.portal") {
		task javadocJar(type: Jar) {
			from ("${project.rootDir}/misc/javadoc-redirect")
			classifier "javadoc"
		}
	
		artifacts {
			archives sourcesJar
			archives javadocJar
		}
	}
	
	// MavenPublishing (new)
	
	publishing {
		
		repositories {
			maven {
				name "snapshot"
				url "https://oss.sonatype.org/content/repositories/snapshots/"
				credentials {
					username project.properties['sonatypeUsername'] ?: "nouser"
					password project.properties['sonatypePassword'] ?: "nopass"
				}
			}
			maven {
				name "release"
				url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
				credentials {
					username project.properties['sonatypeUsername'] ?: "nouser"
					password project.properties['sonatypePassword'] ?: "nopass"
				}
			}
		}
	}

	// Additional configuration of publishing
	apply plugin: ConfigurePublishing

	configurePublishing {
		withPomXml {
			asNode().with {
				appendNode('url', 'http://mnlipp.github.io/jgrapes/')
				appendNode('scm').with {
					appendNode('url', 'scm:git@github.com:mnlipp/jgrapes.git')
					appendNode('connection', 'scm:git@github.com:mnlipp/jgrapes.git')
					appendNode('developerConnection', 'git@github.com:mnlipp/jgrapes.git')
				}
				appendNode('licenses').with {
					appendNode('license').with {
						appendNode('name', 'GPL 3.0')
						appendNode('url', 'https://www.gnu.org/licenses/gpl-3.0.en.html')
						appendNode('distribution', 'repo')
					}
				}
				appendNode('developers').with {
					appendNode('developer').with {
						appendNode('id', 'mnlipp')
						appendNode('name', 'Michael N. Lipp')
					}
				}
			}
		}
	}
	
	afterEvaluate {
		if(!project.name.startsWith("org.jgrapes")) {
			tasks.matching { it.group == "publishing" }.all {
				enabled = false
			}
			tasks.matching { it.name == "baseline" }.all {
				enabled = false
			}
		}
	}
	
    apply plugin: 'eclipse'
    
    eclipse {
        classpath {
            // 'org.eclipse.buildship.core.gradleclasspathcontainer',
            // containers 'aQute.bnd.classpath.container'
            downloadJavadoc = true
            downloadSources = true
        }
        project {
			// buildCommand 'bndtools.core.bndbuilder'
			buildCommand 'org.eclipse.jdt.core.javabuilder'
            // buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
            // buildCommand 'bndtools.core.bndbuilder'
            buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
            // 'org.eclipse.buildship.core.gradleprojectnature',
            natures 'org.eclipse.jdt.core.javanature', \
                'bndtools.core.bndnature', \
                'net.sf.eclipsecs.core.CheckstyleNature'
				'org.eclipse.jdt.groovy.core.groovyNature'
        }
		jdt {
            sourceCompatibility = 1.8
            targetCompatibility = 1.8
            javaRuntimeName = "JavaSE-1.8"
		}
    }
    tasks.eclipse.dependsOn(cleanEclipse)
}

configurations {
    javadocTaglets
}

dependencies {
    javadocTaglets "org.jdrupes.taglets:plantuml-taglet:1.0.+"
    // javadocTaglets "com.github.mnlipp:jdrupes-taglets:master-SNAPSHOT"
}

gitPublish {
	repoUri = 'https://github.com/mnlipp/jgrapes.git'
	branch = 'gh-pages'
	contents {
		from("${buildDir}/javadoc") {
			into 'javadoc-portal'
		}
	}
	preserve { include '**/*' }
	commitMessage = "Updated."
}

// Until https://github.com/ajoberstar/gradle-git-publish/issues/41 is fixed
tasks.gitPublishCopy.dependsOn(":org.jgrapes.portal:javadoc")
tasks.gitPublishCopy.dependsOn(":org.jgrapes.portal:documentationjs")

task stage {
	// Build everything first
	subprojects.tasks.each { tc -> dependsOn tc.findByName("build") }
	// Publish JavaDoc
	dependsOn gitPublishPush	
}

configure(stage) {
	description = 'To be executed by travis, build and update JavaDoc.'
	group = 'build'
}

apply plugin: 'eclipse'

tasks.eclipse.dependsOn(cleanEclipse)
